<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Max Nagy</title><link>https://maxnagy.com/</link><description>Recent content on Max Nagy</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2023 Max Nagy</copyright><lastBuildDate>Mon, 18 Sep 2023 10:31:00 +0200</lastBuildDate><atom:link href="https://maxnagy.com/index.xml" rel="self" type="application/rss+xml"/><item><title>IBM Model 1 Machine Translation in Python</title><link>https://maxnagy.com/posts/ibm/</link><pubDate>Mon, 18 Sep 2023 10:31:00 +0200</pubDate><guid>https://maxnagy.com/posts/ibm/</guid><description>&lt;p>The IBM model 1 is the original gangster of statistical machine translation.
It can learn a dictionary between two languages from a number of translated sentences
without any real understanding of language and with a complete disregard for word order.&lt;/p>
&lt;p>Even though, we will see that is is able to get meaningful results even from small-ish
training sets. While the usual way of explaining its working involves alignments, I find
it much more intuitive to think about it as a variant of &lt;a href="https://en.wikipedia.org/wiki/Power_iteration">Von Mises Iteration&lt;/a>.
In both cases we iteratively move some kind of mass to the most probable solution. Constant
normalization of the solution reinforces the most probable solution while suppressing less
probable ones.&lt;/p></description><content>&lt;p>The IBM model 1 is the original gangster of statistical machine translation.
It can learn a dictionary between two languages from a number of translated sentences
without any real understanding of language and with a complete disregard for word order.&lt;/p>
&lt;p>Even though, we will see that is is able to get meaningful results even from small-ish
training sets. While the usual way of explaining its working involves alignments, I find
it much more intuitive to think about it as a variant of &lt;a href="https://en.wikipedia.org/wiki/Power_iteration">Von Mises Iteration&lt;/a>.
In both cases we iteratively move some kind of mass to the most probable solution. Constant
normalization of the solution reinforces the most probable solution while suppressing less
probable ones.&lt;/p>
&lt;p>We start by asking ChatGPT for some translations:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>translations &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;hallo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;guten morgen&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;good morning&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;auf wiedersehen&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;goodbye&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;danke&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;thank you&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bitte&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;please&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich esse gerne pizza.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i enjoy eating pizza.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;das ist ein leckeres gericht.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;this is a delicious dish.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;möchtest du zum abendessen gehen?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;would you like to go for dinner?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich trinke gerne kaffee am morgen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i like to have coffee in the morning.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;dieses restaurant serviert köstliche pasta.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;this restaurant serves delicious pasta.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich liebe schokoladeneis.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i love chocolate ice cream.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;kannst du mir bitte das salz reichen?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;can you please pass me the salt?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wir haben gestern abend sushi gegessen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;we had sushi last night.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;das restaurant hat eine umfangreiche speisekarte.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the restaurant has an extensive menu.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich mag frisches gemüse in meinem salat.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i like fresh vegetables in my salad.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;kannst du bitte das dessert bestellen?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;can you please order dessert?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;das brot ist frisch aus dem ofen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the bread is fresh from the oven.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;meine oma macht die besten pfannkuchen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;my grandma makes the best pancakes.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wir brauchen noch einige zutaten für das abendessen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;we need a few more ingredients for dinner.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;das ist ein traditionelles deutsches gericht.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;this is a traditional german dish.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich koche gerne italienische gerichte.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i enjoy cooking italian dishes.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;der kellner brachte uns die speisekarte.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the waiter brought us the menu.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich habe eine allergie gegen erdnüsse.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i have an allergy to peanuts.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;heute abend machen wir grillen im garten.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tonight, we&amp;#39;re having a barbecue in the garden.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich probiere gerne exotische gerichte.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i enjoy trying exotic dishes.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;die suppe ist noch heiß.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the soup is still hot.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich habe lust auf ein stück schokoladenkuchen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i&amp;#39;m in the mood for a piece of chocolate cake.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;die kellnerin empfahl den fisch des tages.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the waitress recommended the fish of the day.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wir haben gestern ein neues restaurant ausprobiert.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;we tried a new restaurant yesterday.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;die pizza ist mit peperoni und oliven belegt.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the pizza is topped with pepperoni and olives.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich esse lieber sushi mit stäbchen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i prefer eating sushi with chopsticks.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;das restaurant serviert authentische mexikanische tacos.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the restaurant serves authentic mexican tacos.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;möchtest du etwas zum knabbern während des films?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;would you like something to snack on during the movie?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich habe gestern abend spaghetti bolognese gekocht.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i cooked spaghetti bolognese last night.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;das brot schmeckt besonders gut mit butter.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the bread tastes especially good with butter.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;das restaurant hat eine tolle auswahl an vorspeisen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the restaurant has a great selection of appetizers.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;in der bäckerei gibt es frische croissants.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;there are fresh croissants available at the bakery.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;die suppe ist gut gewürzt und heiß.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the soup is well-seasoned and hot.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich habe einen tisch für zwei personen reserviert.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i&amp;#39;ve reserved a table for two people.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;heute abend bestellen wir chinesisches essen.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tonight, we&amp;#39;re ordering chinese food.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;kannst du mir bitte das salatdressing reichen?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;can you please pass me the salad dressing?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ich habe eine vorliebe für scharfe gerichte.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;i have a preference for spicy dishes.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;das restaurant bietet vegetarische optionen an.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the restaurant offers vegetarian options.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;die kuchen in dieser bäckerei sind unwiderstehlich.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;the cakes at this bakery are irresistible.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wir planen eine grillparty am samstag.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;we&amp;#39;re planning a barbecue party on saturday.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># do some simple normalization and tokenization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span>(s: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> list[str]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>lower()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># we also swap the tuples so e=english and f=foreign (as is customary for IBM models)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>translations &lt;span style="color:#f92672">=&lt;/span> [(pre(e), pre(d)) &lt;span style="color:#66d9ef">for&lt;/span> d, e &lt;span style="color:#f92672">in&lt;/span> translations]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The implementation follows the pseudocode of &lt;a href="https://www2.statmt.org/book/">Philipp Koehns Slides&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> defaultdict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#f92672">=&lt;/span> defaultdict(&lt;span style="color:#66d9ef">lambda&lt;/span>: defaultdict(&lt;span style="color:#66d9ef">lambda&lt;/span>: &lt;span style="color:#ae81ff">0.1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> defaultdict(&lt;span style="color:#66d9ef">lambda&lt;/span>: defaultdict(float))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#f92672">=&lt;/span> defaultdict(float)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> all_words_e &lt;span style="color:#f92672">=&lt;/span> set(word &lt;span style="color:#66d9ef">for&lt;/span> sentence, _ &lt;span style="color:#f92672">in&lt;/span> translations &lt;span style="color:#66d9ef">for&lt;/span> word &lt;span style="color:#f92672">in&lt;/span> sentence)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> all_words_f &lt;span style="color:#f92672">=&lt;/span> set(word &lt;span style="color:#66d9ef">for&lt;/span> _, sentence &lt;span style="color:#f92672">in&lt;/span> translations &lt;span style="color:#66d9ef">for&lt;/span> word &lt;span style="color:#f92672">in&lt;/span> sentence)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s_total &lt;span style="color:#f92672">=&lt;/span> defaultdict(float)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> e, f &lt;span style="color:#f92672">in&lt;/span> translations:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># calculate how much probability mass each english word will recieve&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> we &lt;span style="color:#f92672">in&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> wf &lt;span style="color:#f92672">in&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s_total[we] &lt;span style="color:#f92672">+=&lt;/span> t[we][wf]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># collect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> we &lt;span style="color:#f92672">in&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> wf &lt;span style="color:#f92672">in&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># give each english word its probability mass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count[we][wf] &lt;span style="color:#f92672">+=&lt;/span> t[we][wf] &lt;span style="color:#f92672">/&lt;/span> s_total[we]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep track how much probability mass each foreign word gave away&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total[wf] &lt;span style="color:#f92672">+=&lt;/span> t[we][wf] &lt;span style="color:#f92672">/&lt;/span> s_total[we]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># estimate probabilities&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> wf &lt;span style="color:#f92672">in&lt;/span> all_words_f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> we &lt;span style="color:#f92672">in&lt;/span> all_words_e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># normalize t(e|f), so that \sum_f t(e|f) = 1 for all e, ie we get proper probability distributions.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t[we][wf] &lt;span style="color:#f92672">=&lt;/span> count[we][wf] &lt;span style="color:#f92672">/&lt;/span> total[wf]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, dump our dictionary:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>words_f &lt;span style="color:#f92672">=&lt;/span> set()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>words_e &lt;span style="color:#f92672">=&lt;/span> set()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> e, f &lt;span style="color:#f92672">in&lt;/span> translations:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> we &lt;span style="color:#f92672">in&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> words_e&lt;span style="color:#f92672">.&lt;/span>add(we)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> wf &lt;span style="color:#f92672">in&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> words_f&lt;span style="color:#f92672">.&lt;/span>add(wf)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> we &lt;span style="color:#f92672">in&lt;/span> words_e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prob, wf &lt;span style="color:#f92672">=&lt;/span> max((t[we][wf], wf) &lt;span style="color:#66d9ef">for&lt;/span> wf &lt;span style="color:#f92672">in&lt;/span> words_f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> prob &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0.9&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># skip unconverged words&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>we&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> -&amp;gt; &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>wf&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> (&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>prob&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.2f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result is pretty impressive, the overwhelming majority of translations are solid:&lt;/p>
&lt;pre tabindex="0">&lt;code>extensive -&amp;gt; umfangreiche (0.99)
is -&amp;gt; ist (1.00)
hello -&amp;gt; hallo (1.00)
good -&amp;gt; guten (0.99)
and -&amp;gt; und (1.00)
can -&amp;gt; kannst (1.00)
had -&amp;gt; gegessen (0.99)
dressing -&amp;gt; salatdressing (1.00)
pizza -&amp;gt; pizza (1.00)
eating -&amp;gt; esse (1.00)
serves -&amp;gt; serviert (1.00)
goodbye -&amp;gt; wiedersehen (1.00)
sushi -&amp;gt; sushi (1.00)
please -&amp;gt; bitte (1.00)
dishes -&amp;gt; gerichte (1.00)
an -&amp;gt; eine (0.99)
bread -&amp;gt; brot (1.00)
enjoy -&amp;gt; gerne (0.94)
has -&amp;gt; hat (1.00)
well-seasoned -&amp;gt; gewürzt (1.00)
restaurant -&amp;gt; restaurant (1.00)
menu -&amp;gt; speisekarte (1.00)
salt -&amp;gt; salz (0.99)
with -&amp;gt; mit (1.00)
morning -&amp;gt; morgen (1.00)
&lt;/code>&lt;/pre></content></item><item><title>Speeding up Python with Java</title><link>https://maxnagy.com/posts/jpype/</link><pubDate>Sat, 27 May 2023 11:43:00 +0200</pubDate><guid>https://maxnagy.com/posts/jpype/</guid><description>Remember kids, 8 billion devices run Java.</description><content>&lt;p>Speeding up Python with C, C++, Rust or Fortran is pretty common.
Today we&amp;rsquo;ll do something different and use Java instead. While definitely uncool, its memory safe,
garbage collected and pretty quick due to JVM magic.&lt;/p>
&lt;p>As an example, we&amp;rsquo;ll be implementing a very simple state machine that counts the number of times
a value passes a certain limit in a sequence of data. That&amp;rsquo;s not a very useful thing per se, but
the pattern of a state machine iterating over an array is pretty versatile and something Python is
really bad at due to its slow loops.&lt;/p>
&lt;p>Let&amp;rsquo;s start with the Python implementation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">steps&lt;/span>(arr: np&lt;span style="color:#f92672">.&lt;/span>ndarray, limit) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> tuple[int, int]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> up &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> down &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> a &lt;span style="color:#f92672">in&lt;/span> arr:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> state &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">and&lt;/span> a &lt;span style="color:#f92672">&amp;gt;&lt;/span> limit:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> up &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> state &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">and&lt;/span> a &lt;span style="color:#f92672">&amp;lt;=&lt;/span> limit:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> down &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> up, down
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assert&lt;/span> steps(np&lt;span style="color:#f92672">.&lt;/span>array([&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>]), &lt;span style="color:#ae81ff">0.5&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> (&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Java version is also pretty straight forward:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Step&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> up;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> down;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Step&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr, &lt;span style="color:#66d9ef">float&lt;/span> limit) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> up &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> down &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> state &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">float&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (state &lt;span style="color:#f92672">==&lt;/span> 0 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> a &lt;span style="color:#f92672">&amp;gt;&lt;/span> limit) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> up &lt;span style="color:#f92672">+=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (state &lt;span style="color:#f92672">==&lt;/span> 1 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> a &lt;span style="color:#f92672">&amp;lt;=&lt;/span> limit) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> down &lt;span style="color:#f92672">+=&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">up&lt;/span> &lt;span style="color:#f92672">=&lt;/span> up;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">down&lt;/span> &lt;span style="color:#f92672">=&lt;/span> down;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To call it, we add a small wrapper using &lt;a href="https://github.com/jpype-project/jpype">jpype&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> jpype
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jpype&lt;span style="color:#f92672">.&lt;/span>shutdownJVM()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">RuntimeError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jpype&lt;span style="color:#f92672">.&lt;/span>startJVM()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Step &lt;span style="color:#f92672">=&lt;/span> jpype&lt;span style="color:#f92672">.&lt;/span>JClass(&lt;span style="color:#e6db74">&amp;#34;Step&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">steps_java&lt;/span>(arr: np&lt;span style="color:#f92672">.&lt;/span>ndarray, limit: float):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> Step(jpype&lt;span style="color:#f92672">.&lt;/span>JArray&lt;span style="color:#f92672">.&lt;/span>of(arr), limit)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res&lt;span style="color:#f92672">.&lt;/span>up, res&lt;span style="color:#f92672">.&lt;/span>down
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Jpype really nailed the ergonomics of using Java objects in python. Only the JVM handling feels a little clunky and
is pretty slow on my machine. Lets compare the two versions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>❯ javac Step.java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>❯ ipython3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python 3.11.3 &lt;span style="color:#f92672">(&lt;/span>main, Apr &lt;span style="color:#ae81ff">7&lt;/span> 2023, 19:25:52&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Clang 14.0.0 &lt;span style="color:#f92672">(&lt;/span>clang-1400.0.29.202&lt;span style="color:#f92672">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type &lt;span style="color:#e6db74">&amp;#39;copyright&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;credits&amp;#39;&lt;/span> or &lt;span style="color:#e6db74">&amp;#39;license&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> more information
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IPython 8.13.2 -- An enhanced Interactive Python. Type &lt;span style="color:#e6db74">&amp;#39;?&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> help.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In &lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>: from step import *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In &lt;span style="color:#f92672">[&lt;/span>2&lt;span style="color:#f92672">]&lt;/span>: arr &lt;span style="color:#f92672">=&lt;/span> np.array&lt;span style="color:#f92672">(&lt;/span>np.random.random&lt;span style="color:#f92672">(&lt;/span>size&lt;span style="color:#f92672">=&lt;/span>1000000&lt;span style="color:#f92672">)&lt;/span>, dtype&lt;span style="color:#f92672">=&lt;/span>np.float32&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In &lt;span style="color:#f92672">[&lt;/span>3&lt;span style="color:#f92672">]&lt;/span>: %timeit steps_java&lt;span style="color:#f92672">(&lt;/span>arr, .9&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5.31 ms ± 70.7 µs per loop &lt;span style="color:#f92672">(&lt;/span>mean ± std. dev. of &lt;span style="color:#ae81ff">7&lt;/span> runs, &lt;span style="color:#ae81ff">100&lt;/span> loops each&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In &lt;span style="color:#f92672">[&lt;/span>4&lt;span style="color:#f92672">]&lt;/span>: %timeit steps_java&lt;span style="color:#f92672">(&lt;/span>arr, .9&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e"># after warmup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5.11 ms ± &lt;span style="color:#ae81ff">111&lt;/span> µs per loop &lt;span style="color:#f92672">(&lt;/span>mean ± std. dev. of &lt;span style="color:#ae81ff">7&lt;/span> runs, &lt;span style="color:#ae81ff">100&lt;/span> loops each&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In &lt;span style="color:#f92672">[&lt;/span>5&lt;span style="color:#f92672">]&lt;/span>: %timeit steps&lt;span style="color:#f92672">(&lt;/span>arr, .9&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1.33 s ± 34.6 ms per loop &lt;span style="color:#f92672">(&lt;/span>mean ± std. dev. of &lt;span style="color:#ae81ff">7&lt;/span> runs, &lt;span style="color:#ae81ff">1&lt;/span> loop each&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In &lt;span style="color:#f92672">[&lt;/span>6&lt;span style="color:#f92672">]&lt;/span>: %timeit steps&lt;span style="color:#f92672">(&lt;/span>arr, .9&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e"># after warmup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1.23 s ± 67.2 ms per loop &lt;span style="color:#f92672">(&lt;/span>mean ± std. dev. of &lt;span style="color:#ae81ff">7&lt;/span> runs, &lt;span style="color:#ae81ff">1&lt;/span> loop each&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In &lt;span style="color:#f92672">[&lt;/span>7&lt;span style="color:#f92672">]&lt;/span>: assert steps&lt;span style="color:#f92672">(&lt;/span>arr, .9&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> steps_java&lt;span style="color:#f92672">(&lt;/span>arr, .9&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e"># both produce the same result&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, the java version is around 200 times faster, even with the data conversion.
I also like the ergonomics and that the JVM saves me from cross compiling.&lt;/p>
&lt;p>Remember kids, 8 billion devices run Java.&lt;/p></content></item><item><title>How to debug NaN Values in PyTorch Models during Training</title><link>https://maxnagy.com/posts/torch_nans/</link><pubDate>Fri, 13 Jan 2023 10:31:00 +0200</pubDate><guid>https://maxnagy.com/posts/torch_nans/</guid><description>It&amp;rsquo;s really slow.</description><content>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># FROM THE DEPTH OF THE POND SHINES THE TORCH OF LIGHT WHERE THERE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># IS GREED IN MEN AND LIGHT IN THE STONE WHERE THE ANCIENT SPIRIT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># LIVES THAT CONSUMES TIME TO SHED TRUTH UPON NUMBERS THAT EXCEED THE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># REACH OF GOD IT REQUIRES THE ULTIMATE SACRIFICE OF TIME OH HOW SLOW&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># IT IS BUT ONLY IT TRULY IS POWERFUL ENOUGH TO REDEEM MY ASSERTS AND&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TO FREE OUR PITYFUL HUMAN SPIRITS FROM THOSE STUPID NANS IN MY MODEL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># PARAMETERS PLS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>torch&lt;span style="color:#f92672">.&lt;/span>autograd&lt;span style="color:#f92672">.&lt;/span>set_detect_anomaly(&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s really slow. (&lt;a href="https://github.com/pytorch/pytorch/issues/1274">via&lt;/a>)&lt;/p></content></item><item><title>The overengineered Solution to my Pigeon Problem</title><link>https://maxnagy.com/posts/pigeons/</link><pubDate>Sat, 16 Apr 2022 12:05:06 +0200</pubDate><guid>https://maxnagy.com/posts/pigeons/</guid><description>&lt;p>TL;DR: I built a wifi-equipped water gun to shoot
the pigeons on my balcony, controlled over the internet by a
python script running openCV reading the camera image of my
old iPhone.&lt;/p>
&lt;hr>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The pigeons in my backyard find particular pleasures in voiding their excrements onto my balcony. Dissatisfied with this situation, I went online to find a solution. I created a handy table to give you an overview of the vast number of &lt;del>effective&lt;/del> &lt;em>established&lt;/em> ways to get rid if pigeons:&lt;/p></description><content>&lt;p>TL;DR: I built a wifi-equipped water gun to shoot
the pigeons on my balcony, controlled over the internet by a
python script running openCV reading the camera image of my
old iPhone.&lt;/p>
&lt;hr>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>The pigeons in my backyard find particular pleasures in voiding their excrements onto my balcony. Dissatisfied with this situation, I went online to find a solution. I created a handy table to give you an overview of the vast number of &lt;del>effective&lt;/del> &lt;em>established&lt;/em> ways to get rid if pigeons:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Approach&lt;/th>
&lt;th style="text-align: left">Why it doesn&amp;rsquo;t work&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">Plastic crows&lt;/td>
&lt;td style="text-align: left">Pigeons get used to them&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Crow stickers&lt;/td>
&lt;td style="text-align: left">Pigeons get used to them&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Reflective wind mills / CDs / &amp;hellip;&lt;/td>
&lt;td style="text-align: left">Pigeons get used to them&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Sounds of animals (dogs, predators)&lt;/td>
&lt;td style="text-align: left">Pigeons get used to them&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Dog and cat hair&lt;/td>
&lt;td style="text-align: left">Pigeons get used to them&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Ultrasonic sounds&lt;/td>
&lt;td style="text-align: left">Hear me out: Even the people advocating for it admit that pigeons (like humans) are incapable of perceiving ultrasonic sounds. Instead they think that pigeons are &lt;a href="https://en.wikipedia.org/wiki/Electromagnetic_hypersensitivity">wavies&lt;/a> and that the mere presence of some imperceptible waves somehow distress the pigeons. You can&amp;rsquo;t make this stuff up. As might be expected, nobody ever had any success with it.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Shooting pigeons&lt;/td>
&lt;td style="text-align: left">While it would certainly help coping with the distress of cleaning their crap, its highly illegal in Germany and even after one of my neighbours apparently tried it (I just saw the police leaflets) the number of pigeons didn&amp;rsquo;t noticeably decrease. To be fair, some random neighbour with an air rifle is probably no comparison to the olympic pigeon killers &lt;a href="https://en.wikipedia.org/wiki/Shooting_at_the_1900_Summer_Olympics#Excluded_events">of the past&lt;/a>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Getting a cat&lt;/td>
&lt;td style="text-align: left">That should actually work if the cat has regular access to the balcony. But I don&amp;rsquo;t have a cat and it would probably suicide itself in its attempt to hunt pigeons in the fifth floor.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Spikes&lt;/td>
&lt;td style="text-align: left">They work IFF you buy the right ones AND put them absolutely everywhere AND are careful to actually mount them correctly AND you don&amp;rsquo;t plan to use the area covered yourself at all AND you don&amp;rsquo;t even want to look at its disgraced looks. So it is completely pointless for a balcony.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Nets&lt;/td>
&lt;td style="text-align: left">They work if you can tolerate their looks (I don&amp;rsquo;t) and mount them correctly. In practice they are often mounted incorrectly so you have to remove dead or alive pigeons on a somewhat regular basis.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Scaring them away by shouting, water gun, clapping, etc.&lt;/td>
&lt;td style="text-align: left">Pigeons get used to it. Also you typically spend way too little time on the balcony to do keep them away permanently. But what if I outsourced the water gunning to some robotic contraption?&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>After a quick burst of manic energy during exam phase, I decided to solve the pigeon problem on my balcony once and for all (and in a humane way). The idea was quite simple: Mount an electric water gun on my balcony, detect pigeons with a web cam and shoot them. Pigeons should not get used to getting sprayed at (at least not while its coldish), I don&amp;rsquo;t have to disfigure my balcony and I&amp;rsquo;m not harming the pigeons in any way or even risk killing them. As I approached this project during my exam phase, it should also be quick to implement using things I already have laying around.&lt;/p>
&lt;h1 id="the-water-gun">The Water Gun&lt;/h1>
&lt;p>I bought a cheap electric water gun &lt;a href="https://www.amazon.de/Wasserpistole-Elektrische-Wasserblaster-Wasserdicht-Wasserspielzeug/dp/B09578C69R/ref=sr_1_6?keywords=wasserpistole+elektrisch&amp;qid=1650101643&amp;sprefix=wasserpistole+ele%2Caps%2C147&amp;sr=8-6">from Amazon&lt;/a> and tested it out: The range of around 3-4 meters is pathetic, but plenty for my balcony.&lt;/p>
&lt;p>Next, I opened it up to figure out how to control it over the internet:&lt;/p>
&lt;p>&lt;img alt="The water gun opened" src="https://maxnagy.com/posts/pigeons/water_gun.jpg">&lt;/p>
&lt;p>I chose one of my trusty Wemos D1 Mini boards as the brain of the
water gun. They are small, cheap, offer Wifi and have some shields
available for them that ease cabling. In particular I&amp;rsquo;m using the
relay shield. (Relays are basically electrically operated
switches).
To control the water gun, I inserted a small paper contraption
in the battery department that allows me to break the gun&amp;rsquo;s
power and added a small hole for the cables:&lt;/p>
&lt;p>&lt;img alt="The water gun with the paper contraption and the microcontroller installed" src="https://maxnagy.com/posts/pigeons/microcontroller.jpg">&lt;/p>
&lt;p>The microcontroller is powered by a USB power bank which is convenient, as the microcontroller does not drain the gun&amp;rsquo;s battery (where
recheargable batteries don&amp;rsquo;t fit (yes, really)), and the guns motor
can draw as much power as it wants without crashing the
microcontroller. Also, it allows me to reprogram the Wemos if I
mess up the wifi config ;)&lt;/p>
&lt;h1 id="the-camera">The Camera&lt;/h1>
&lt;p>I decided to use my old iPhone 6S as a camera: Its small, has a
battery, works without any configuration and most importantly: I
had it at hand. After finding a suitable position on my window, I
designed a simple holding bracket, 3D printed it and glued it
on my balcony window using &lt;a href="https://www.amazon.de/3M-VHB-Hochleistungsklebeband-schwarz-doppelseitiges/dp/B00EDLPG7Y/ref=sr_1_6?keywords=3M+tape&amp;qid=1650114049&amp;sr=8-6">3M mounting tape&lt;/a> &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
I use &lt;a href="https://apps.apple.com/de/app/ipcamera-high-end-networkcam/id570912928?l=en">this app&lt;/a>
to get a MJPEG stream of its camera. It works good and
I like that it lets you black out the display. As a final step,
I put masking tape on the window, so that the camera does not look
into my neighbours windows as that would be creepy.&lt;/p>
&lt;h1 id="the-software">The Software&lt;/h1>
&lt;h4 id="image-analysis">Image Analysis&lt;/h4>
&lt;p>The brains of the operation is a python script using openCV. It
compares the current image to the normal background &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.
If the average amount of change of all pixels is above some threshold, we fire the
gun. We use four small tricks to make this work reliably in practice:&lt;/p>
&lt;ol>
&lt;li>If a pixel changed by less then 10% we don&amp;rsquo;t count it as 0 in the calculation&lt;/li>
&lt;li>If the amount of change if bigger than some threshold, we ignore it
(in this case someone touched the camera)&lt;/li>
&lt;li>We add a mask over the image to exclude some flowers that move in
the wind, as well as the reflections in the window. (Otherwise
it gets triggered whenever someone comes close to the window)&lt;/li>
&lt;li>After a movement was detected, wait for the movement to stop
(and the background to stabilise) again.&lt;/li>
&lt;/ol>
&lt;p>This heuristic works pretty reliably.&lt;/p>
&lt;p>The resulting code looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> stream &lt;span style="color:#f92672">=&lt;/span> CamGear(source&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://IP_OF_IPHONE/live&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> background &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> frame &lt;span style="color:#f92672">=&lt;/span> stream&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># apply mask&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> frame &lt;span style="color:#f92672">=&lt;/span> cv2&lt;span style="color:#f92672">.&lt;/span>bitwise_and(frame, frame, mask&lt;span style="color:#f92672">=&lt;/span>mask)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># convert to grayscale&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> frame &lt;span style="color:#f92672">=&lt;/span> cv2&lt;span style="color:#f92672">.&lt;/span>cvtColor(frame, cv2&lt;span style="color:#f92672">.&lt;/span>COLOR_RGB2GRAY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> background &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> background &lt;span style="color:#f92672">=&lt;/span> frame
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># update background&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> background &lt;span style="color:#f92672">=&lt;/span> cv2&lt;span style="color:#f92672">.&lt;/span>addWeighted(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> background, background_alpha, frame, (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span> background_alpha), &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># calculate difference to background &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> diff &lt;span style="color:#f92672">=&lt;/span> cv2&lt;span style="color:#f92672">.&lt;/span>absdiff(frame, background)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># apply threshold to background&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _, diff &lt;span style="color:#f92672">=&lt;/span> cv2&lt;span style="color:#f92672">.&lt;/span>threshold(diff, &lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#ae81ff">255&lt;/span>, cv2&lt;span style="color:#f92672">.&lt;/span>THRESH_BINARY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> score &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>mean(diff)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> armed:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> score &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># camera was moved&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> armed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> score &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># PIGEON!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> armed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> frame &lt;span style="color:#f92672">=&lt;/span> stream&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cv2&lt;span style="color:#f92672">.&lt;/span>imwrite(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.jpg&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> frame, &lt;span style="color:#75715e"># save a picture for later&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requests&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;http://IP_OF_SERVER&amp;#34;&lt;/span>, timeout&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># rearm if the image is stable again&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> armed &lt;span style="color:#f92672">=&lt;/span> (score &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="networking">Networking&lt;/h4>
&lt;p>The first iteration used a HTTP server on the Wemos Board that
triggered, whenever a request was received. This was
straightforward and worked well, until I found out that the wifi
antenna on the Wemos is too weak to connect to my wifi from the
balcony. The solution was to connect the Wemos to my phones
hotspot. The problem is, that now the Wemos and my laptop are now
in different networks so they cannot talk to one another directly.&lt;/p>
&lt;p>I therefore wrote a small go program (the &lt;em>reflector&lt;/em>) that
accepts HTTP and TCP connections: Whenever it receives a HTTP
request, it sends &amp;ldquo;PEW!&amp;rdquo; to one of the connected TCP clients
(Usually there is only one). The code is pretty simple, the only
tricky part is to ensure that reconnections are handled well.
Go makes this easy with channels and goroutines:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">channel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#ae81ff">42&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">channel&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">channel&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:4242&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sock&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Listen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;:4243&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handle&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sock&lt;/span>.&lt;span style="color:#a6e22e">Accept&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">conn&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;PEW!\n&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The water gun connects via TCP and fires whenever it
receives &amp;ldquo;PEW!&amp;rdquo;. The python script on my laptop stays as it is and
simply sends its HTTP requests to the go program on my server
instead of directly to the Wemos. I chose to use micropython to
program the Wemos:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pin &lt;span style="color:#f92672">=&lt;/span> machine&lt;span style="color:#f92672">.&lt;/span>Pin(&lt;span style="color:#ae81ff">5&lt;/span>, machine&lt;span style="color:#f92672">.&lt;/span>Pin&lt;span style="color:#f92672">.&lt;/span>OUT) &lt;span style="color:#75715e"># connected to relay&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addr &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;IP_OF_MY_SERVER&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">4243&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> socket&lt;span style="color:#f92672">.&lt;/span>socket()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s&lt;span style="color:#f92672">.&lt;/span>connect(addr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;PEW&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">255&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;PEW!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pin&lt;span style="color:#f92672">.&lt;/span>value(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">0.5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pin&lt;span style="color:#f92672">.&lt;/span>value(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The smart ones among you may have noticed some bugs in the snippets
above: TCP does not guarantee that our &amp;ldquo;PEW!&amp;rdquo; message is sent
received in a single package; if multiple clients are connected,
only one receives the message (which may be disconnected);
and the whole operation is entirely unencrypted and
unauthenticated. And you&amp;rsquo;d be absolutely right. A nice thing about
writing software just for oneself is that its completely sufficent
if it works for me (tm). Of course I made sure that the setup cannot
be used to gain access to my network / remote code execution /
host child porn / be used for DDOS or all of the other stuff that
may happen when you deploy software on the internet. If this post
motivates someone to find my server and empty the whole whopping
200ml of water on my balcony, I may add a password and or let the
reflector bind only my VPN. But if you made it this far through the
text you wouldn&amp;rsquo;t do that, right? &amp;lt;3&lt;/p>
&lt;h1 id="results">Results&lt;/h1>
&lt;p>Let&amp;rsquo;s have a look at our first customer:&lt;/p>
&lt;p>&lt;img src="https://maxnagy.com/posts/pigeons/1.jpg">&lt;/p>
&lt;p>Look at him sitting there, just behind the railings. This is
precisely where the water gun &lt;em>would&lt;/em> be pointing at. This picture
was taken, in the brief period between realising that the wifi on
the balcony is too weak and coming up with the reflector solution.
Luckily he was not in the mood for release.&lt;/p>
&lt;p>After I installed the updated version including a working water
gun, not a single pigeon was seen again. &lt;em>For six days&lt;/em>. Maybe
shouting at pigeons is not that bad of a solution after all?
Luckily I had an exam phase to distract me from this
disappointment.&lt;/p>
&lt;p>I was quite relieved-ish to find another customer on day seven:&lt;/p>
&lt;p>&lt;img src="https://maxnagy.com/posts/pigeons/4.jpg">&lt;/p>
&lt;p>Spot on! This success lasted for a few days until the pigeons took
it to the third dimension:&lt;/p>
&lt;p>&lt;img src="https://maxnagy.com/posts/pigeons/5.jpg">&lt;/p>
&lt;p>I guess, I&amp;rsquo;ll just keep the table inside for now.&lt;/p>
&lt;p>To be continued&amp;hellip;&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I &lt;strong>love&lt;/strong> this stuff! I mounted various tablets for my
&lt;a href="https://github.com/maxmunzel/strichliste2.0/blob/master/README.md">tally list project&lt;/a>,
half of the things on my racing drone, the side panels of my
kitchen(!), all the cables smart home hubs and switches under my desk,
power strips in every imaginable place, and so many other things with it.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>The background is computed as the moving average of all images the software gets.
For each new image the software gets from the camera the background is calculated
as &lt;code>background[x,y] &amp;lt;- background[x,y] * 0.95 + new_image[x,y] * 0.05&lt;/code> for each pixel.
(the software works in black and white) If we just took one picture in the beginning,
we would detect a lot of differences as clouds change the lighting throughout the day.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title/><link>https://maxnagy.com/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://maxnagy.com/about/</guid><description>&lt;p>Hi, I&amp;rsquo;m Alex and this is my website!&lt;/p>
&lt;p>I currently study computer science in the master&amp;rsquo;s program at KIT.&lt;/p>
&lt;p>This website is currently pretty boring and I&amp;rsquo;ll try my best to
make it more w̴͉̤͖̰̺͇͌͆͐̑̎͋̆̌͘ē̴̪̬̟͓̯̫̖̎̾̓̏̚͝i̷͍̳̱̲̳̥͒̒͐̌̒̋͂̈͑͘͠r̵̛̪͎͒̑̅͐͗́͒̒͌̕͠͝d̴̡͈̻̯͕̤͚͕̝̣̈́̓͝ in the future. Doodles as a comment system,
anyone?&lt;/p></description><content>&lt;p>Hi, I&amp;rsquo;m Alex and this is my website!&lt;/p>
&lt;p>I currently study computer science in the master&amp;rsquo;s program at KIT.&lt;/p>
&lt;p>This website is currently pretty boring and I&amp;rsquo;ll try my best to
make it more w̴͉̤͖̰̺͇͌͆͐̑̎͋̆̌͘ē̴̪̬̟͓̯̫̖̎̾̓̏̚͝i̷͍̳̱̲̳̥͒̒͐̌̒̋͂̈͑͘͠r̵̛̪͎͒̑̅͐͗́͒̒͌̕͠͝d̴̡͈̻̯͕̤͚͕̝̣̈́̓͝ in the future. Doodles as a comment system,
anyone?&lt;/p></content></item><item><title>doodle</title><link>https://maxnagy.com/doodle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://maxnagy.com/doodle/</guid><description>&lt;style>
canvas {
border: 2px solid #FEAA70;
}
&lt;/style>
&lt;/head>
&lt;p>&lt;canvas id="drawingCanvas" width="400" height="400">&lt;/canvas>&lt;br>
&lt;button onclick="resetCanvas()">Reset&lt;/button>
&lt;button onclick="sendData()">Send&lt;/button>&lt;/p>
&lt;script>
function postToURL(url, imageData) {
// Convert image data to Blob
let blob = new Blob([imageData], { type: 'image/jpeg' });
// Create a FormData object
let formData = new FormData();
// Append the Blob to the FormData object
formData.append('image', blob, 'image.jpg');
// Send a POST request with the FormData
fetch(url, {
method: 'POST',
body: formData
})
.then(response => {
if (!response.ok) {
throw new Error('Network response was not ok');
}
return response.json();
})
.then(data => {
console.log('Data sent successfully:', data);
})
.catch(error => {
console.error('Error sending data:', error);
});
}
let canvas = document.getElementById("drawingCanvas");
let ctx = canvas.getContext("2d");
let bgColor= "#222129"; // default draw color
let drawColor = "#FEAA70"; // default background color
let drawing = false;
function draw(e) {
if (!drawing) return;
ctx.fillStyle = drawColor;
ctx.fillRect(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop, 4, 4);
}
canvas.addEventListener("mousedown", () => {
drawing = true;
});
canvas.addEventListener("mousemove", draw);
window.addEventListener("mouseup", () => {
drawing = false;
});
function resetCanvas() {
ctx.fillStyle = bgColor;
ctx.fillRect(0, 0, canvas.width, canvas.height);
}
function sendData() {
// Post data to a specified URL
let imageData = canvas.toDataURL(); // Convert canvas to image data
let currentURL = window.location.href; // Get current URL
let postData = {
image: imageData,
url: currentURL
};
// Assuming you have a function to post data to a URL
// Replace 'postToURL' with your actual function to post data
postToURL('http://demo.maxnagy.com/doodle', postData);
}
&lt;/script></description><content>&lt;style>
canvas {
border: 2px solid #FEAA70;
}
&lt;/style>
&lt;/head>
&lt;p>&lt;canvas id="drawingCanvas" width="400" height="400">&lt;/canvas>&lt;br>
&lt;button onclick="resetCanvas()">Reset&lt;/button>
&lt;button onclick="sendData()">Send&lt;/button>&lt;/p>
&lt;script>
function postToURL(url, imageData) {
// Convert image data to Blob
let blob = new Blob([imageData], { type: 'image/jpeg' });
// Create a FormData object
let formData = new FormData();
// Append the Blob to the FormData object
formData.append('image', blob, 'image.jpg');
// Send a POST request with the FormData
fetch(url, {
method: 'POST',
body: formData
})
.then(response => {
if (!response.ok) {
throw new Error('Network response was not ok');
}
return response.json();
})
.then(data => {
console.log('Data sent successfully:', data);
})
.catch(error => {
console.error('Error sending data:', error);
});
}
let canvas = document.getElementById("drawingCanvas");
let ctx = canvas.getContext("2d");
let bgColor= "#222129"; // default draw color
let drawColor = "#FEAA70"; // default background color
let drawing = false;
function draw(e) {
if (!drawing) return;
ctx.fillStyle = drawColor;
ctx.fillRect(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop, 4, 4);
}
canvas.addEventListener("mousedown", () => {
drawing = true;
});
canvas.addEventListener("mousemove", draw);
window.addEventListener("mouseup", () => {
drawing = false;
});
function resetCanvas() {
ctx.fillStyle = bgColor;
ctx.fillRect(0, 0, canvas.width, canvas.height);
}
function sendData() {
// Post data to a specified URL
let imageData = canvas.toDataURL(); // Convert canvas to image data
let currentURL = window.location.href; // Get current URL
let postData = {
image: imageData,
url: currentURL
};
// Assuming you have a function to post data to a URL
// Replace 'postToURL' with your actual function to post data
postToURL('http://demo.maxnagy.com/doodle', postData);
}
&lt;/script></content></item></channel></rss>